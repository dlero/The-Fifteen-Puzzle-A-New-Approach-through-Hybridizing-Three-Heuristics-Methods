/**
 * The Fifteen Puzzle—A New Approach through Hybridizing Three Heuristics Methods
 * Authors: Dler O. Hasan, Aso M. Aladdin, Hardi Sabah Talabani, Tarik Ahmed Rashid and Seyedali Mirjalili
 * It is implemented by Dler O. Hasan
 * Cite as: Hasan, D.O.; Aladdin, A.M.; Talabani, H.S.; Rashid, T.A.; Mirjalili, S. The Fifteen Puzzle—A New Approach through Hybridizing Three Heuristics Methods. Computers 2023, 12, 11. https://doi.org/10.3390/computers12010011
 */
import java.util.ArrayList;
import java.util.Collections;

public class theCommonMethods {

    //Generating the goal from 1 to (row numbers * column numbers)
    public Integer[] theGoalBoard(int numRow, int numColumn, String blankAt) {
        Integer[] theGoal = new Integer[numRow * numColumn];
        if (blankAt.equals("topLeft")) {
            for (int i = 0; i < numRow * numColumn; i++) {
                theGoal[i] = i;
            }
        } else {
            for (int i = 0; i < numRow * numColumn; i++) {
                theGoal[i] = i + 1;
                if (i == (numRow * numColumn - 1))
                    theGoal[i] = 0;
            }
        }
        return theGoal;
    }

    //Generating Random Numbers
    public void FillAndShuffleCells(ArrayList<Integer> BoardCellsNumbers, int numRow, int numColumn, String blankAt) {
//        ------------The 17 configurations that require 80 moves have the blank tile located at the bottom-right corner.--------------
//        int[][] temp = {{0, 12, 9, 13}, {15, 11, 10, 14}, {3, 7, 2, 5}, {4, 8, 6, 1}}; //86//80 ama
//        int[][] temp = {{0, 12, 10, 13}, {15, 11, 14, 9}, {3, 7, 2, 5}, {4, 8, 6, 1}}; //84//80 ama
//        int[][] temp = {{0, 11, 9, 13}, {12, 15, 10, 14}, {3, 7, 6, 2}, {4, 8, 5, 1}}; //86//80 ama
//        int[][] temp = {{0, 15, 9, 13}, {11, 12, 10, 14}, {3, 7, 6, 2}, {4, 8, 5, 1}}; //86//80 ama
//        int[][] temp = {{0, 12, 9, 13}, {15, 11, 10, 14}, {3, 7, 6, 2}, {4, 8, 5, 1}}; //86//80 ama
//        int[][] temp = {{0, 12, 14, 13}, {15, 11, 9, 10}, {3, 7, 6, 2}, {4, 8, 5, 1}}; //84//80 ama
//        int[][] temp = {{0, 12, 10, 13}, {15, 11, 14, 9}, {3, 7, 6, 2}, {4, 8, 5, 1}}; //86//80 ama
//        int[][] temp = {{0, 12, 11, 13}, {15, 14, 10, 9}, {3, 7, 6, 2}, {4, 8, 5, 1}}; //84//80 ama
//        int[][] temp = {{0, 12, 10, 13}, {15, 11, 9, 14}, {7, 3, 6, 2}, {4, 8, 5, 1}}; //84//80 ama

//        int[][] temp = {{0, 12, 9, 13}, {15, 11, 14, 10}, {3, 8, 6, 2}, {4, 7, 5, 1}}; //86//80 ama
//        int[][] temp = {{0, 12, 9, 13}, {15, 11, 10, 14}, {8, 3, 6, 2}, {4, 7, 5, 1}}; //84//80 ama
//        int[][] temp = {{0, 12, 14, 13}, {15, 11, 9, 10}, {8, 3, 6, 2}, {4, 7, 5, 1}}; //84//80 ama
//        int[][] temp = {{0, 12, 9, 13}, {15, 11, 10, 14}, {7, 8, 6, 2}, {4, 3, 5, 1}}; //86//80 ama
//        int[][] temp = {{0, 12, 10, 13}, {15, 11, 14, 9}, {7, 8, 6, 2}, {4, 3, 5, 1}}; //84//80 ama
//        int[][] temp = {{0, 12, 9, 13}, {15, 8, 10, 14}, {11, 7, 6, 2}, {4, 3, 5, 1}}; //88//80 ama
//        int[][] temp = {{0, 12, 9, 13}, {15, 11, 10, 14}, {3, 7, 5, 6}, {4, 8, 2, 1}}; //86//80 ama
//        int[][] temp = {{0, 12, 9, 13}, {15, 11, 10, 14}, {7, 8, 5, 6}, {4, 3, 2, 1}}; //84//80 ama

//--------------The 11 configurations that require 80 moves have the blank tile located at the top-left corner.--------------
//        int[][] temp = {{15, 14, 8, 12}, {10, 11, 9, 13}, {2, 6, 5, 1}, {3, 7, 4, 0}}; //88
//        int[][] temp = {{15, 11, 13, 12}, {14, 10, 8, 9}, {7, 2, 5, 1}, {3, 6, 4, 0}}; //88
//        int[][] temp = {{15, 11, 13, 12}, {14, 10, 8, 9}, {2, 6, 5, 1}, {3, 7, 4, 0}}; //86
//        int[][] temp = {{15, 11, 9, 12}, {14, 10, 13, 8}, {6, 7, 5, 1}, {3, 2, 4, 0}}; //88
//        int[][] temp = {{15, 11, 9, 12}, {14, 10, 13, 8}, {2, 6, 5, 1}, {3, 7, 4, 0}}; //84
//        int[][] temp = {{15, 11, 8, 12}, {14, 10, 13, 9}, {2, 7, 5, 1}, {3, 6, 4, 0}};  //84
//        int[][] temp = {{15, 11, 9, 12}, {14, 10, 8, 13}, {6, 2, 5, 1}, {3, 7, 4, 0}}; //86
//        int[][] temp = {{15, 11, 8, 12}, {14, 10, 9, 13}, {2, 6, 5, 1}, {3, 7, 4, 0}}; //82
//        int[][] temp = {{15, 11, 8, 12}, {14, 10, 9, 13}, {2, 6, 4, 5}, {3, 7, 1, 0}}; //82
//        int[][] temp = {{15, 14, 13, 12}, {10, 11, 8, 9}, {2, 6, 5, 1}, {3, 7, 4, 0}}; //84
//        int[][] temp = {{15, 11, 13, 12}, {14, 10, 9, 5}, {2, 6, 8, 1}, {3, 7, 4, 0}}; //82


        //------------------------------------100 Instances Korf ---------------------------
        int[][] temp={{14,13,15,7},{11,12,9,5},{6,0,2,1},{4,8,10,3}}; //57 ama
//        int[][] temp={{13,5,4,10},{9,12,8,14},{2,3,7,1},{0,15,11,6}};  //55
//        int[][] temp={{14,7,8,2},{13,11,10,4},{9,12,5,0},{3,6,1,15}}; //59
//        int[][] temp={{5,12,10,7},{15,11,14,0},{8,2,1,13},{3,4,9,6}}; //56
//        int[][] temp = {{4, 7, 14, 13}, {10, 3, 9, 12}, {11, 5, 6, 15}, {1, 2, 8, 0}};
//        int[][] temp={{14,7,1,9},{12,3,6,15},{8,11,2,5},{10,0,4,13}}; //52
//        int[][] temp = {{2,11,15,5},{13,4,6,7},{12,8,10,1},{9,3,14,0}}; //52
//        int[][] temp={{12,11,15,3},{8,0,4,2},{6,13,9,5},{14,1,10,7}}; //50
//        int[][] temp={{3,14,9,11},{5,4,8,2},{13,12,6,7},{10,1,15,0}};//46
//        int[][] temp={{13,11,8,9},{0,15,7,10},{4,3,6,14},{5,12,2,1}};//59
//        int[][] temp={{5,9,13,14},{6,3,7,12},{10,8,4,0},{15,2,11,1}};//57
//        int[][] temp={{14,1,9,6},{4,8,12,5},{7,2,3,0},{10,11,13,15}};//45
//        int[][] temp={{3,6,5,2},{10,0,15,14},{1,4,13,12},{9,8,11,7}};//46
//        int[][] temp={{7,6,8,1},{11,5,14,10},{3,4,9,13},{15,2,0,12}};//59
//        int[][] temp={{13,11,4,12},{1,8,9,15},{6,5,14,2},{7,3,10,0}};//62
//        int[][] temp={{1,3,2,5},{10,9,15,6},{8,14,13,11},{12,4,7,0}};//44
//        int[][] temp={{15,14,0,4},{11,1,6,13},{7,5,8,9},{3,2,10,12}};//66
//        int[][] temp={{6,0,14,12},{1,15,9,10},{11,4,7,2},{8,3,5,13}};//55
//        int[][] temp={{7,11,8,3},{14,0,6,15},{1,4,13,9},{5,12,2,10}};//46
//        int[][] temp={{6,12,11,3},{13,7,9,15},{2,14,8,10},{4,1,5,0}};//52
//        int[][] temp={{12,8,14,6},{11,4,7,0},{5,1,10,15},{3,13,9,2}};//54
//        int[][] temp={{14,3,9,1},{15,8,4,5},{11,7,10,13},{0,2,12,6}};//59
//        int[][] temp={{10,9,3,11},{0,13,2,14},{5,6,4,7},{8,15,1,12}};//49
//        int[][] temp={{7,3,14,13},{4,1,10,8},{5,12,9,11},{2,15,6,0}};//54
//        int[][] temp={{11,4,2,7},{1,0,10,15},{6,9,14,8},{3,13,5,12}};//52
//        int[][] temp={{5,7,3,12},{15,13,14,8},{0,10,9,6},{1,4,2,11}};//58
//        int[][] temp={{14,1,8,15},{2,6,0,3},{9,12,10,13},{4,7,5,11}};//53
//        int[][] temp={{13,14,6,12},{4,5,1,0},{9,3,10,2},{15,11,8,7}};//52
//        int[][] temp={{9,8,0,2},{15,1,4,14},{3,10,7,5},{11,13,6,12}};//54
//        int[][] temp={{12,15,2,6},{1,14,4,8},{5,3,7,0},{10,13,9,11}};//47
//        int[][] temp={{12,8,15,13},{1,0,5,4},{6,3,2,11},{9,7,14,10}}; //50
//        int[][] temp={{14,10,9,4},{13,6,5,8},{2,12,7,0},{1,3,11,15}}; //59
//        int[][] temp={{14,3,5,15},{11,6,13,9},{0,10,2,12},{4,1,7,8}};//60
//        int[][] temp={{6,11,7,8},{13,2,5,4},{1,10,3,9},{14,0,12,15}};//52
//        int[][] temp={{1,6,12,14},{3,2,15,8},{4,5,13,9},{0,7,11,10}};//55
//        int[][] temp={{12,6,0,4},{7,3,15,1},{13,9,8,11},{2,14,5,10}};//52
//        int[][] temp={{8,1,7,12},{11,0,10,5},{9,15,6,13},{14,2,3,4}};//58
//        int[][] temp={{7,15,8,2},{13,6,3,12},{11,0,4,10},{9,5,1,14}};//53
//        int[][] temp={{9,0,4,10},{1,14,15,3},{12,6,5,7},{11,13,8,2}};//49
//        int[][] temp={{11,5,1,14},{4,12,10,0},{2,7,13,3},{9,15,6,8}};//54
//        int[][] temp={{8,13,10,9},{11,3,15,6},{0,1,2,14},{12,5,4,7}};//54
//        int[][] temp={{4,5,7,2},{9,14,12,13},{0,3,6,11},{8,1,15,10}};//42
//        int[][] temp={{11,15,14,13},{1,9,10,4},{3,6,2,12},{7,5,8,0}};//64
//        int[][] temp={{12,9,0,6},{8,3,5,14},{2,4,11,7},{10,1,15,13}};//50
//        int[][] temp={{3,14,9,7},{12,15,0,4},{1,8,5,6},{11,10,2,13}};//51
//        int[][] temp={{8,4,6,1},{14,12,2,15},{13,10,9,5},{3,7,0,11}};//49
//        int[][] temp={{6,10,1,14},{15,8,3,5},{13,0,2,7},{4,9,11,12}};//47
//        int[][] temp={{8,11,4,6},{7,3,10,9},{2,12,15,13},{0,1,5,14}};//49
//        int[][] temp={{10,0,2,4},{5,1,6,12},{11,13,9,7},{15,3,14,8}};//59
//        int[][] temp={{12,5,13,11},{2,10,0,9},{7,8,4,3},{14,6,15,1}};//53
//        int[][] temp={{10,2,8,4},{15,0,1,14},{11,13,3,6},{9,7,5,12}};//56
//        int[][] temp={{10,8,0,12},{3,7,6,2},{1,14,4,11},{15,13,9,5}};//56
//        int[][] temp={{14,9,12,13},{15,4,8,10},{0,2,1,7},{3,11,5,6}};//64
//        int[][] temp={{12,11,0,8},{10,2,13,15},{5,4,7,3},{6,9,14,1}};//56
//        int[][] temp={{13,8,14,3},{9,1,0,7},{15,5,4,10},{12,2,6,11}};//41
//        int[][] temp={{3,15,2,5},{11,6,4,7},{12,9,1,0},{13,14,10,8}};//55
//        int[][] temp={{5,11,6,9},{4,13,12,0},{8,2,15,10},{1,7,3,14}};//50
//        int[][] temp={{5,0,15,8},{4,6,1,14},{10,11,3,9},{7,12,2,13}};//51
//        int[][] temp={{15,14,6,7},{10,1,0,11},{12,8,4,9},{2,5,13,3}}; //57
//        int[][] temp = {{11, 14, 13, 1}, {2, 3, 12, 4}, {15, 7, 9, 5}, {10, 6, 8, 0}};
//        int[][] temp={{6,13,3,2},{11,9,5,10},{1,7,12,14},{8,4,0,15}}; //45
//        int[][] temp={{4,6,12,0},{14,2,9,13},{11,8,3,15},{7,10,1,5}}; //57
//        int[][] temp={{8,10,9,11},{14,1,7,15},{13,4,0,12},{6,2,5,3}}; //56
//        int[][] temp={{5,2,14,0},{7,8,6,3},{11,12,13,15},{4,10,9,1}}; //51
//        int[][] temp={{7,8,3,2},{10,12,4,6},{11,13,5,15},{0,1,9,14}};//47
//        int[][] temp={{11,6,14,12},{3,5,1,15},{8,0,10,13},{9,7,4,2}}; //61
//        int[][] temp={{7,1,2,4},{8,3,6,11},{10,15,0,5},{14,12,13,9}};//50
//        int[][] temp={{7,3,1,13},{12,10,5,2},{8,0,6,11},{14,15,4,9}};//51
//        int[][] temp={{6,0,5,15},{1,14,4,9},{2,13,8,10},{11,12,7,3}}; //53
//        int[][] temp={{15,1,3,12},{4,0,6,5},{2,8,14,9},{13,10,7,11}};//52
//        int[][] temp={{5,7,0,11},{12,1,9,10},{15,6,2,3},{8,4,13,14}};//44
//        int[][] temp={{12,15,11,10},{4,5,14,0},{13,7,1,2},{9,8,3,6}}; //56
//        int[][] temp={{6,14,10,5},{15,8,7,1},{3,4,2,0},{12,9,11,13}}; //49
//        int[][] temp={{14,13,4,11},{15,8,6,9},{0,7,3,1},{2,10,12,5}};//56
//        int[][] temp={{14,4,0,10},{6,5,1,3},{9,2,13,15},{12,7,8,11}};//48
//        int[][] temp={{15,10,8,3},{0,6,9,5},{1,14,13,11},{7,2,12,4}};//57
//        int[][] temp={{0,13,2,4},{12,14,6,9},{15,1,10,3},{11,5,8,7}};//54
//        int[][] temp={{3,14,13,6},{4,15,8,9},{5,12,10,0},{2,7,1,11}};//53
//        int[][] temp={{0,1,9,7},{11,13,5,3},{14,12,4,2},{8,6,10,15}};//42
//        int[][] temp={{11,0,15,8},{13,12,3,5},{10,1,4,6},{14,9,7,2}};//57
//        int[][] temp={{13,0,9,12},{11,6,3,5},{15,8,1,10},{4,14,2,7}};//53
//        int[][] temp={{14,10,2,1},{13,9,8,11},{7,3,6,12},{15,5,4,0}};//62
//        int[][] temp={{12,3,9,1},{4,5,10,2},{6,11,15,0},{14,7,13,8}};//49
//        int[][] temp={{15,8,10,7},{0,12,14,1},{5,9,6,3},{13,11,4,2}};//55
//        int[][] temp={{4,7,13,10},{1,2,9,6},{12,8,14,5},{3,0,11,15}};//44
//        int[][] temp={{6,0,5,10},{11,12,9,2},{1,7,4,3},{14,8,13,15}};//45
//        int[][] temp={{9,5,11,10},{13,0,2,1},{8,6,14,12},{4,7,3,15}};//52
//        int[][] temp={{15,2,12,11},{14,13,9,5},{1,3,8,7},{0,10,6,4}};//65
//        int[][] temp={{11,1,7,4},{10,13,3,8},{9,14,0,15},{6,5,2,12}};//54
//        int[][] temp={{5,4,7,1},{11,12,14,15},{10,13,8,6},{2,0,9,3}};//50
//        int[][] temp={{9,7,5,2},{14,15,12,10},{11,3,6,1},{8,13,0,4}};//57
//        int[][] temp={{3,2,7,9},{0,15,12,4},{6,11,5,14},{8,13,10,1}};//57
//        int[][] temp={{13,9,14,6},{12,8,1,2},{3,4,0,7},{5,10,11,15}};//46
//        int[][] temp={{5,7,11,8},{0,14,9,13},{10,12,3,15},{6,1,4,2}};//53
//        int[][] temp={{4,3,6,13},{7,15,9,0},{10,5,8,11},{2,12,1,14}};//50
//        int[][] temp={{1,7,15,14},{2,6,4,9},{12,11,13,3},{0,8,5,10}};//49
//        int[][] temp={{9,14,5,7},{8,15,1,2},{10,4,13,6},{12,0,11,3}};//44
//        int[][] temp={{0,11,3,12},{5,2,1,9},{8,10,14,15},{7,4,13,6}};//54
//        int[][] temp={{7,15,4,0},{10,9,2,5},{12,11,13,6},{1,3,14,8}};//57
//        int[][] temp={{11,4,0,8},{6,10,5,13},{12,7,14,3},{1,2,9,15}};//54



        for (int i = 0; i < numRow; i++)
            for (int j = 0; j < numColumn; j++)
                BoardCellsNumbers.add(temp[i][j]);

        //Checking if the starting configuration is solvable or not
        int boardTemp[] = new int[numRow * numColumn];
        for (int c = 0; c < numRow * numColumn; c++)
            boardTemp[c] = BoardCellsNumbers.get(c);

        if (blankAt.equals("topLeft") && isSolvable(boardTemp, numRow, numColumn)) {
            for (int k = 0; k < (numRow * numColumn - 1); k++) {
                if (BoardCellsNumbers.get(k) != 0 && BoardCellsNumbers.get(k + 1) != 0) {
                    Collections.swap(BoardCellsNumbers, k, k + 1);
                    break;
                }
            }
        }
        if (!blankAt.equals("topLeft") && !isSolvable(boardTemp, numRow, numColumn)) {
            for (int k = 0; k < (numRow * numColumn - 1); k++) {
                if (BoardCellsNumbers.get(k) != 0 && BoardCellsNumbers.get(k + 1) != 0) {
                    Collections.swap(BoardCellsNumbers, k, k + 1);
                    break;
                }
            }
        }
    }

    public boolean isSolvable(int array[], int numRow, int numColumn) {
        int zeroLevel = 0;
        for (int x = (numRow * numColumn - 1); x >= 0; x--)
            if (array[x] == 0)
                zeroLevel = (numRow - (x / numColumn)) - 1;

        for (int d = 0; d < (numRow * numColumn - 1); d++) {
            if (array[d] == 0) {
                array[d] = array[d + 1];
                array[d + 1] = 0;
            }
        }
        int inversionCount = 0;
        for (int i = 0; i < (numRow * numColumn - 1); i++)
            for (int j = i + 1; j < (numRow * numColumn - 1); j++)
                if (array[i] > array[j])
                    inversionCount++;

        if (numColumn % 2 == 1)
            return inversionCount % 2 == 0;
        else
            return (inversionCount + zeroLevel) % 2 == 0;
    }

}